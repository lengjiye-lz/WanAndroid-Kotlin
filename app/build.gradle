import com.lengjiye.mvvm.MVVMPlugin

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

// 自定义插件 生成mvvm文件
apply plugin: MVVMPlugin

def mvvmGeneratorProperties = new Properties()
mvvmGeneratorProperties.load(new FileInputStream(file("mvvmGenerator.properties")))

mvvm {
    applicationId mvvmGeneratorProperties.applicationId
    functionName mvvmGeneratorProperties.functionName
    author mvvmGeneratorProperties.author
    addViewType Integer.parseInt(mvvmGeneratorProperties.addViewType)
}

//#定义混淆代码的路径
def proguardPath = "../proguard/code/proguard-rules.pro"

// 服务器地址
def String base_url_release = "\"https://www.wanandroid.com\""

android {

    compileSdkVersion cfgs.compileSdkVersion
    buildToolsVersion cfgs.buildToolsVersion

    defaultConfig {
        applicationId "com.lengjiye.code"
        minSdkVersion cfgs.minSdkVersion
        targetSdkVersion cfgs.targetSdkVersion
        versionCode cfgs.versionCode
        versionName cfgs.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    signingConfigs {
        wanAndroid {
            //绝对路径和相对路径都可以
            storeFile file("../keystores/lengjiye.keystore")  //签名文件
            storePassword "ljy019916"                       //密码
            keyAlias "lengjiye"
            keyPassword "ljy019916"
        }

    }

    dataBinding {
        enabled = true
    }

    buildTypes {

        debug {
            debuggable true
            // 是否开启混淆
            minifyEnabled false
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            signingConfig signingConfigs.wanAndroid
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardPath
            buildConfigField("String", "BASE_URL", base_url_release)
        }

        qa {
            debuggable true
            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // proguard-android.txt是android官方默认配置的一些不能混淆的类
            //路径 /Android/sdk/tools/proguard/proguard-android.txt
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardPath
            signingConfig signingConfigs.wanAndroid
            buildConfigField("String", "BASE_URL", base_url_release)
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardPath
            signingConfig signingConfigs.wanAndroid
            buildConfigField("String", "BASE_URL", base_url_release)
        }
    }

    androidExtensions {
        experimental = true
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName =  "WanAndroid-" + buildType.name + "-v" +
                    defaultConfig.versionName + "-" + defaultConfig.versionCode + ".apk"
        }
    }
}

project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = [
                "-Xjsr305=strict",
                "-progressive"
        ]
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    testImplementation "junit:junit:$cfgs.junit"
    androidTestImplementation "androidx.test:runner:$cfgs.test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$cfgs.test_core"

    implementation project(':base')
    implementation project(':network')
    implementation project(':tools')
    implementation project(':room')
    implementation project(':baseparameter')
    implementation project(':networkscope')

//    implementation "com.airbnb.android:lottie:$cfgs.lottieVersion"
    implementation "com.ashokvarma.android:bottom-navigation-bar:$cfgs.navigationVersion"
    // 查看数据库
    debugImplementation "com.facebook.stetho:stetho:$cfgs.stetho"
    // stetho 不实现版本，只是为了防止编译失败
    releaseImplementation 'com.github.qiduzao:test:v3.0'
    implementation "androidx.cardview:cardview:$cfgs.cardview"
    //最新版本
    implementation "com.youth.banner:banner:$cfgs.banner"
    implementation "com.github.bumptech.glide:glide:$cfgs.glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$cfgs.glide"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$cfgs.leakcanary"
    // 刷新加载控件
    implementation "com.scwang.smart:refresh-layout-kernel:$cfgs.smart_refresh_layout"      //核心必须依赖
    implementation "com.scwang.smart:refresh-header-material:$cfgs.smart_refresh_layout"    //谷歌刷新头
    implementation "com.scwang.smart:refresh-footer-ball:$cfgs.smart_refresh_layout"    //球脉冲加载
    // webview
    implementation "com.just.agentweb:agentweb:$cfgs.agentweb"

    implementation "com.google.android.material:material:$cfgs.material"
    implementation "androidx.constraintlayout:constraintlayout:$cfgs.constraintlayout"

    // 时间选择器
    implementation 'com.contrarywind:Android-PickerView:4.1.9'

}
